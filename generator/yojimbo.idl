// Web IDL code goes here

[Internal="int"] enum LogLevel {
    "YOJIMBO_LOG_LEVEL_INFO",
    "YOJIMBO_LOG_LEVEL_DEBUG"

};


//        Server server( GetDefaultAllocator(), privateKey, Address( "127.0.0.1", ServerPort ), config, adapter, time );

[Internal="yojimbo::Address"]
interface Address  {
    void Address( String host, int port );

    [Internal="addressToString", CObject] String toString();
};

[Internal="yojimbo::Allocator"]
interface Allocator  {
    [Internal="yojimbo::GetDefaultAllocator", Static, Ref, Const]  Allocator getDefault();
};

[Internal="HashlinkAdapter"]
interface Adapter  {
    void Adapter(  );
};

[Internal="yojimbo::Server"]
interface Server  {
    void Server( [Ref] Allocator allocator, bytes privateKey, [Ref] Address address, [Ref] ClientServerConfig config, [Ref] Adapter adapter, double time );
    [Internal="Start"]   void start( int maxClients );

    [Internal="GetAddress", Const, Ref] Address getAddress();
    [Internal="Stop"]   void stop();
    [Internal="SendPackets"]   void sendPackets();
    [Internal="ReceivePackets"]   void receivePackets();
    [Internal="AdvanceTime"]   void advanceTime(double time);
    [Internal="IsRunning"] bool isRunning();

};

[Internal="yojimbo::ClientServerConfig"]
interface ClientServerConfig 
{
    void ClientServerConfig();

    //actually an int64
    attribute int protocolId;                                    ///< Clients can only connect to servers with the same protocol id. Use this for versioning.
    attribute int timeout;                                            ///< Timeout value in seconds. Set to negative value to disable timeouts (for debugging only).
    attribute int clientMemory;                                       ///< Memory allocated inside Client for packets, messages and stream allocations (bytes)
    attribute int serverGlobalMemory;                                 ///< Memory allocated inside Server for global connection request and challenge response packets (bytes)
    attribute int serverPerClientMemory;                              ///< Memory allocated inside Server for packets, messages and stream allocations per-client (bytes)
    attribute bool networkSimulator;                                  ///< If true then a network simulator is created for simulating latency, jitter, packet loss and duplicates.
    attribute int maxSimulatorPackets;                                ///< Maximum number of packets that can be stored in the network simulator. Additional packets are dropped.
    attribute int fragmentPacketsAbove;                               ///< Packets above this size (bytes) are split apart into fragments and reassembled on the other side.
    attribute int packetFragmentSize;                                 ///< Size of each packet fragment (bytes).
    attribute int maxPacketFragments;                                 ///< Maximum number of fragments a packet can be split up into.
    attribute int packetReassemblyBufferSize;                         ///< Number of packet entries in the fragmentation reassembly buffer.
    attribute int ackedPacketsBufferSize;                             ///< Number of packet entries in the acked packet buffer. Consider your packet send rate and aim to have at least a few seconds worth of entries.
    attribute int receivedPacketsBufferSize;                          ///< Number of packet entries in the received packet sequence buffer. Consider your packet send rate and aim to have at least a few seconds worth of entries.   
};

[Internal="yojimbo::Client"]
interface Client {
    void Client([Ref] Allocator allocator,  [Ref] Address address, [Ref] ClientServerConfig config, [Ref] Adapter adapter, double time );
    
    [Internal="Connect"] void connect(int clientID, bytes connectToken );
    [Internal="Disconnect"] void disconnect();
    [Internal="IsDisconnected"] bool isDisconnected();
    [Internal="IsConnected"] bool isConnected();
    [Internal="GetAddress", Const, Ref] Address getAddress();
    [Internal="SendPackets"]   void sendPackets();
    [Internal="ReceivePackets"]   void receivePackets();
    [Internal="AdvanceTime"]   void advanceTime(double time);
    [Internal="ConnectionFailed"] bool hasConnectionFailed();


};

enum MatchStatus
{
    "MATCH_IDLE",                 ///< The matcher is idle.
    "MATCH_BUSY",                 ///< The matcher is requesting a match.
    "MATCH_READY",                ///< The match response is ready to read with Matcher::GetConnectToken.
    "MATCH_FAILED"                ///< The matcher failed to find a match.
};


[Internal="yojimbo::Matcher"]
interface Matcher {
    void Matcher (  [Ref] Allocator allocator );
    
    [Internal="Initialize"] bool initialize(bytes cert, int cert_len );
    [Internal="RequestMatch"] void requestMatch(String server, int port, int protocolID, int clientID, bool verifyCertificate);
    [Internal="GetMatchStatus"] MatchStatus getMatchStatus();

    [Internal="HxGetConnectToken", CObject] bytes getConnectToken( [Out] int length);
};

[NoDelete]
interface Yojimbo {
    [Static, Internal="InitializeYojimbo"] void initialize();
    [Static, Internal="ShutdownYojimbo"] void shutdown();
    [Static, Internal="yojimbo_log_level"] void logLevel(LogLevel level);
    [Internal="hl_cache_string_type", Static] void cacheStringType( [HString] String test );
    [Static, Internal="yojimbo_sleep"] void sleep(double time);
};
	
