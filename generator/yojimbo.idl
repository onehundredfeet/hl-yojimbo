// Web IDL code goes here

[Internal="int"] enum LogLevel {
    "YOJIMBO_LOG_LEVEL_INFO",
    "YOJIMBO_LOG_LEVEL_DEBUG"

};

enum ChannelType {
    "CHANNEL_TYPE_RELIABLE_ORDERED",                              ///< Messages are received reliably and in the same order they were sent. 
    "CHANNEL_TYPE_UNRELIABLE_UNORDERED"                           ///< Messages are sent unreliably. Messages may arrive out of order, or not at all.
};


interface ChannelConfig
{
    void ChannelConfig();
    attribute ChannelType type;                                           ///< Channel type: reliable-ordered or unreliable-unordered.
    attribute bool disableBlocks;                                         ///< Disables blocks being sent across this channel.
    attribute int sentPacketBufferSize;                                   ///< Number of packet entries in the sent packet sequence buffer. Please consider your packet send rate and make sure you have at least a few seconds worth of entries in this buffer.
    attribute int messageSendQueueSize;                                   ///< Number of messages in the send queue for this channel.
    attribute int messageReceiveQueueSize;                                ///< Number of messages in the receive queue for this channel.
    attribute int maxMessagesPerPacket;                                   ///< Maximum number of messages to include in each packet. Will write up to this many messages, provided the messages fit into the channel packet budget and the number of bytes remaining in the packet.
    attribute int packetBudget;                                           ///< Maximum amount of message data to write to the packet for this channel (bytes). Specifying -1 means the channel can use up to the rest of the bytes remaining in the packet.
    attribute int maxBlockSize;                                           ///< The size of the largest block that can be sent across this channel (bytes).
    attribute int blockFragmentSize;                                      ///< Blocks are split up into fragments of this size (bytes). Reliable-ordered channel only.
    attribute float messageResendTime;                                    ///< Minimum delay between message resends (seconds). Avoids sending the same message too frequently. Reliable-ordered channel only.
    attribute float blockFragmentResendTime;                              ///< Minimum delay between block fragment resends (seconds). Avoids sending the same fragment too frequently. Reliable-ordered channel only.


    [Internal="GetMaxFragmentsPerBlock"] int getMaxFragmentsPerBlock();
};

//        Server server( GetDefaultAllocator(), privateKey, Address( "127.0.0.1", ServerPort ), config, adapter, time );

[Internal="yojimbo::Address"]
interface Address  {
    void Address( String host, int port );

    [Internal="addressToString", CObject] String toString();
};

[Internal="yojimbo::Allocator"]
interface Allocator  {
    [Internal="yojimbo::GetDefaultAllocator", Static, Ref, Const]  Allocator getDefault();
};

enum HLEventType{
    "HLYOJIMBO_INVALID",
    "HLYOJIMBO_CLIENT_CONNECT",
    "HLYOJIMBO_CLIENT_DISCONNECT"
};

[NoDelete, Internal="HLMessage"]
interface Message {
    
};

[Internal="HashlinkAdapter"]
interface Adapter  {
    void Adapter(  );

    int incomingEventCount();
    bool dequeue(); // returns true if a message was dequeued, false if queue was empty
    HLEventType getEventType();
    int getClientIndex();
};


interface NetworkInfo {
    attribute float RTT;                                  ///< Round trip time estimate (milliseconds).
    attribute float packetLoss;                           ///< Packet loss percent.
    attribute float sentBandwidth;                        ///< Sent bandwidth (kbps).
    attribute float receivedBandwidth;                    ///< Received bandwidth (kbps).
    attribute float ackedBandwidth;                       ///< Acked bandwidth (kbps).
    attribute int numPacketsSent;                    ///< Number of packets sent. Actually 64bits :(
    attribute int numPacketsReceived;                ///< Number of packets received. Actually 64bits :(
    attribute int numPacketsAcked;                   ///< Number of packets acked. Actually 64bits :(
};

[Internal="yojimbo::Server"]
interface Server  {
    void Server( [Ref] Allocator allocator, bytes privateKey, [Ref] Address address, [Ref] ClientServerConfig config, [Ref] Adapter adapter, double time );
    [Internal="Start"]   void start( int maxClients );

    [Internal="GetAddress", Const, Ref] Address getAddress();
    [Internal="Stop"]   void stop();
    [Internal="SendPackets"]   void sendPackets();
    [Internal="ReceivePackets"]   void receivePackets();
    [Internal="AdvanceTime"]   void advanceTime(double time);
    [Internal="IsRunning"] bool isRunning();
    [Internal="ReceiveMessage", Const, Cast="HLMessage*"] Message receiveMessage(int client, int channel);
    [Internal="ReleaseMessage"] void releaseMessage(int client, Message msg);
    [Internal="CreateMessage", Const, Cast="HLMessage*"] Message createMessage(int client, [Substitute="0"] int kind);
    [Internal="CanSendMessage" ] bool canSendMessage(int client, int channel);
    [Internal="HasMessagesToSend" ] bool hasMessagesToSend(int client, int channel);
    [Internal="SendMessage"] void sendMessage(int client, int channel, Message msg);

};

[Internal="yojimbo::ClientServerConfig"]
interface ClientServerConfig 
{
    void ClientServerConfig();

    // inherited from connection config
    attribute int numChannels;                                        ///< Number of message channels in [1,MaxChannels]. Each message channel must have a corresponding configuration below.
    attribute int maxPacketSize;                                      ///< The maximum size of packets generated to transmit messages between client and server (bytes).

    [CObject, Internal="hlyojimbo_add_channel"] void addChannel(ChannelConfig channel);

    //actually an int64
    attribute int protocolId;                                    ///< Clients can only connect to servers with the same protocol id. Use this for versioning.
    attribute int timeout;                                            ///< Timeout value in seconds. Set to negative value to disable timeouts (for debugging only).
    attribute int clientMemory;                                       ///< Memory allocated inside Client for packets, messages and stream allocations (bytes)
    attribute int serverGlobalMemory;                                 ///< Memory allocated inside Server for global connection request and challenge response packets (bytes)
    attribute int serverPerClientMemory;                              ///< Memory allocated inside Server for packets, messages and stream allocations per-client (bytes)
    attribute bool networkSimulator;                                  ///< If true then a network simulator is created for simulating latency, jitter, packet loss and duplicates.
    attribute int maxSimulatorPackets;                                ///< Maximum number of packets that can be stored in the network simulator. Additional packets are dropped.
    attribute int fragmentPacketsAbove;                               ///< Packets above this size (bytes) are split apart into fragments and reassembled on the other side.
    attribute int packetFragmentSize;                                 ///< Size of each packet fragment (bytes).
    attribute int maxPacketFragments;                                 ///< Maximum number of fragments a packet can be split up into.
    attribute int packetReassemblyBufferSize;                         ///< Number of packet entries in the fragmentation reassembly buffer.
    attribute int ackedPacketsBufferSize;                             ///< Number of packet entries in the acked packet buffer. Consider your packet send rate and aim to have at least a few seconds worth of entries.
    attribute int receivedPacketsBufferSize;                          ///< Number of packet entries in the received packet sequence buffer. Consider your packet send rate and aim to have at least a few seconds worth of entries.   
};

[Internal="yojimbo::Client"]
interface Client {
    void Client([Ref] Allocator allocator,  [Ref] Address address, [Ref] ClientServerConfig config, [Ref] Adapter adapter, double time );
    
    [Internal="Connect"] void connect(int clientID, bytes connectToken );
    [Internal="Disconnect"] void disconnect();
    [Internal="IsDisconnected"] bool isDisconnected();
    [Internal="IsConnected"] bool isConnected();
    [Internal="GetAddress", Const, Ref] Address getAddress();
    [Internal="SendPackets"]   void sendPackets();
    [Internal="ReceivePackets"]   void receivePackets();
    [Internal="AdvanceTime"]   void advanceTime(double time);
    [Internal="ConnectionFailed"] bool hasConnectionFailed();
    [Internal="CreateMessage", Const, Cast="HLMessage*"] Message createMessage(int type);
    [Internal="CanSendMessage"] bool canSendMessage(int channelIndex);
    [Internal="HasMessagesToSend"] bool hasMessagesToSend(int channelIndex);
    [Internal="SendMessage"] void sendMessage(int channelIndex, Message message);
    [Internal="ReceiveMessage", Const, Cast="HLMessage*"] Message receiveMessage(int channelIndex);
    [Internal="ReleaseMessage"] void releaseMessage(Message message );
    [Internal="GetNetworkInfo"] void getNetworkInfo( [Ref] NetworkInfo info );

//        uint8_t * AllocateBlock( int bytes );
  //      void AttachBlockToMessage( Message * message, uint8_t * block, int bytes );
    //    void FreeBlock( uint8_t * block );


};

enum MatchStatus
{
    "MATCH_IDLE",                 ///< The matcher is idle.
    "MATCH_BUSY",                 ///< The matcher is requesting a match.
    "MATCH_READY",                ///< The match response is ready to read with Matcher::GetConnectToken.
    "MATCH_FAILED"                ///< The matcher failed to find a match.
};


[Internal="yojimbo::Matcher"]
interface Matcher {
    void Matcher (  [Ref] Allocator allocator );
    
    [Internal="Initialize"] bool initialize(bytes cert, int cert_len );
    [Internal="RequestMatch"] void requestMatch(String server, int port, int protocolID, int clientID, bool verifyCertificate);
    [Internal="GetMatchStatus"] MatchStatus getMatchStatus();

    [Internal="HxGetConnectToken", CObject] bytes getConnectToken( [Out] int length);
};

[NoDelete]
interface Yojimbo {
    [Static, Internal="InitializeYojimbo"] void initialize();
    [Static, Internal="ShutdownYojimbo"] void shutdown();
    [Static, Internal="yojimbo_log_level"] void logLevel(LogLevel level);
    [Internal="hl_cache_string_type", Static] void cacheStringType( [HString] String test );
    [Static, Internal="yojimbo_sleep"] void sleep(double time);
};
	
